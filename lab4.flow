import runtime;
import ds/tree;
import ds/array;

Inds(a : [int], m : int) -> [Pair<int, int>] {
    tree : Tree = foldi(a, makeTree(), \i, t, value -> {
            setTree(t, value, arrayPush(getTreeArrayValue(t,value), i))
        });

    foldi(a, [], \i, pairs, a_i -> {
        switch (lookupTree(tree, m - a_i)) {
            Some(ind): concat(pairs, map(ind, \x -> Pair(x, i)));
            None(): pairs;
        }
    });
}

main() {
    m : int = 10;
    a : [int] = [1, -1, 2, -2, 0, 15, 5, -7, 3, 9, 12, -8, 6, 4, 4, -7];
    println(Inds(a, m));
    println(Inds2(a, m));
    quit(0);
}
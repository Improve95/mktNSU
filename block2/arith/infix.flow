import exprDecl;

export {
  re2ie(expr : [RpnExpr]) -> InfixExpr;
  ie2s(expr : InfixExpr, priority : int) -> string;
}

  
re2ie(expr : [RpnExpr]) -> InfixExpr {
  	stack : [InfixExpr] = [];
	a = fold(expr, stack, \st, val -> {
		switch (val) {
			Const(c):
				arrayPush(st, Const(c));
			OpName(name): {
				right = lastElement(st, Const(0));
				a = removeIndex(st, length(st) - 1);
				left = lastElement(a, Const(0));
				b = removeIndex(a, length(a) - 1);
				arrayPush(b, BinOp(name, left, right));
			}
		}
	});
	a[0];
}

ie2s(e : InfixExpr, priority : int) -> string {
	switch (e) {
		Const(number) : i2s(number);
		BinOp(name, l, r) : {
			if (name == "+") {
				retStr = ie2s(l, 2) + "+" + ie2s(r, 2);
				if (priority > 1) {
					"(" + retStr + ")";
				} else {
					retStr;
				}
			} else if (name == "*") {
				retStr = ie2s(l, 2) + "*" + ie2s(r, 2);
				if (priority > 1) {
					"(" + retStr + ")";
				} else {
					retStr;
				}
			} else {
				"empty";
			}
		}
	}
}

calculateInfix() {

}
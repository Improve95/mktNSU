import labs/block2/arith/exprDecl;

/* 
	s2ie - string to infix expression
	ie2s - infix expression to string
	calcIe - calculate infix expression
 */

export {
	s2ie(s : string) -> InfixExpr;
  	ie2s(e : InfixExpr, priority : int) -> string;
  	calcIe(e : InfixExpr, vars : Tree<string, double>) -> double;
}

buildOp(xs : [flow]) {
	fold(xs[2], xs[1], \acc, x -> BinOp(xs[0], acc, x));
}

s2ie(s : string) -> InfixExpr {
	specialPegActions = {
		t1 = setTree(defaultPegActions.t, "buildOp", buildOp);
		SemanticActions(t1);
	}
	parsic(infixGrammar, s, specialPegActions);
}

ie2s(e : InfixExpr, priority : int) -> string {
	switch (e) {
		Const(number) : d2s(number);

		Var(name) : name;

		Frac(l, r) : "[" + ie2s(l, 0) + "|" + ie2s(r, 0) + "]";

		Unary(binOp) : ie2s(binOp, -1);

		BinOp(name, l, r) : {
			if (name == "+") {
				retStr = ie2s(l, 1) + "+" + ie2s(r, 1);
				if (priority > 1) {
					"(" + retStr + ")";
				} else {
					retStr;
				}
			} else if (name == "-") {
				retStr = ie2s(l, 1) + "-" + ie2s(r, 1);
				if (priority > 1) {
					"(" + retStr + ")";
				} else {
					retStr;
				}
			} else if (name == "*") {
				retStr = ie2s(l, 2) + "*" + ie2s(r, 2);
				if (priority == -1) {
					"(-" + ie2s(l, 2) + ")";
				} else if (priority >= 2) {
					"(" + retStr + ")";
				} else {
					retStr;
				}
			} else if (name == "/") {
				retStr = ie2s(l, 2) + "/" + ie2s(r, 2);
				if (priority >= 2) {
					"(" + retStr + ")";
				} else {
					retStr;
				}
			} else {
				"empty";
			}
		}
		Null() : d2s(0.0);
	}
}

calcIe(e : InfixExpr, vars : Tree<string, double>) -> double {
	switch (e) {
		Const(number) : number;

		Var(name) : {
			switch (lookupTree(vars, name)) {
				Some(number): number;
				None(): 0.0;
			}
		}

		Frac(l, r) : calcIe(l, vars) / calcIe(r, vars);

		Unary(binOp) : calcIe(binOp, vars);

		BinOp(name, l, r) : {
			if (name == "+") {
				calcIe(l, vars) + calcIe(r, vars);
			} else if (name == "-") {
				calcIe(l, vars) - calcIe(r, vars);
			} else if (name == "*") {
				calcIe(l, vars) * calcIe(r, vars);
			} else if (name == "/") {
				calcIe(l, vars) / calcIe(r, vars);
			} else {
				0.0;
			}
		} 

		Null() : 0.0;
	}
}
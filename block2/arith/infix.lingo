sum = ws sub:l ws "+" ws sum:r ws { BinOp("+", :l, :r) } | sub;

sub = ws mul:l ws rsub+:r ws { buildOp("-", :l, :r) } | mul;
rsub = ws "-" ws mul:val ws { :val };

mul = ws div:l ws rmul+:r { buildOp("*", :l, :r) } | div;
rmul = ws "*" ws div:val ws { :val };

div = ws unary:l ws rdiv+:r { buildOp("/", :l, :r) } | unary;
rdiv = ws "/" ws unary:val ws { :val };

unary = ws atom:val ws { :val } | ws "-" atom:val ws { BinOp("*", :val, Const(s2d("-1"))) };

atom = ws const:val ws { :val } | ws var:val ws { :val } | ws frac:val ws { :val } | ws "(" ws expr:val ws ")" ws { :val };

expr = ws sum:val ws { :val } | ws "(" ws expr:val ws ")" ws { :val };

frac = "[" ws expr:l ws "|" ws expr:r ws "]" ws { Frac(:l, :r) };
const = ('0'-'9')+$d { Const(s2d($d)) };
var = ('a' - 'z')+$name { Var($name) };
ws = (' '|'\r'|'\n'|'\t')*;
import ar;


export {
    simplArExpr(expr : ArExpr) -> ArExpr;

    der(expr : ArExpr, var : string) -> ArExpr;
}

der(expr : ArExpr, var : string) -> ArExpr {
    switch(expr){
        ArDer(e, v) : der(der(e, v), var);
        ArDeg(v, d) : ArMult(ArMult(d, v), der(v, var));
        ArSum(l, r) : ArSum(der(l, var), der(r, var));
        ArDiff(l, r) : ArDiff(der(l, var), der(r, var));
        ArMult(l, r) : ArSum(ArMult(der(l, var), r), ArMult(l, der(r, var)));
        ArDiv(l, r) : ArDiv(ArDiff(ArMult(der(l, var), r), ArMult(l ,der(r, var))), ArMult(r, r));
        ArNeg(v) : ArNeg(der(v, var));
        ArInt(v) : ArInt(0);
        ArVar(v) : if(v == var) ArInt(1) else ArInt(0)
    }
}

simplArExpr(expr : ArExpr) -> ArExpr {
    switch(expr) {
        ArDer(e, v) : simplArExpr(der(e, v));

        ArDeg(v, d) : {
            if (d == ArInt(0)) ArInt(0)
            else if (d == ArInt(1)) simplArExpr(v)
            else ArDeg(simplArExpr(v), d)
        }

        ArSum(l, r) : {
            l1 = simplArExpr(l);
            r1 = simplArExpr(r);

            if(r1 == ArInt(0)) l1
            else if(l1 == ArInt(0)) r1
            else ArSum(l1, r1)
        }

        ArDiff(l, r) : {
            l1 = simplArExpr(l);
            r1 = simplArExpr(r);

            if(r1 == ArInt(0)) l1
            else if(l1 == ArInt(0)) simplArExpr(ArNeg(r1))
            else ArDiff(l1, r1)
        }

        ArMult(l, r) : {
            l1 = simplArExpr(l);
            r1 = simplArExpr(r);

            if(r1 == ArInt(0) || l1 == ArInt(0)) ArInt(0)
            else if(r1 == ArInt(1)) l1
            else if(l1 == ArInt(1)) r1
            else if(r1 == ArInt(-1)) simplArExpr(ArNeg(l1))
            else if(l1 == ArInt(-1)) simplArExpr(ArNeg(r1))
            else ArMult(l1, r1)
        }

        ArDiv(l, r) : {
            l1 = simplArExpr(l);
            r1 = simplArExpr(r);

            if(r1 == ArInt(1)) l1
            else if(r1 == ArInt(-1)) simplArExpr(ArNeg(l1))
            else if(l1 == ArInt(0) && r1 != ArInt(0)) ArInt(0)
            else ArDiv(l1, r1)
        }

        ArNeg(v) : {
            v1 = simplArExpr(v);

            switch(v1){
                ArNeg(v2) : v2;
                ArInt(v2) : ArInt(-v2);
                default : ArNeg(v1);
            }
        }

        ArVar(v) : ArVar(v);

        ArInt(v) : ArInt(v);
    }
}
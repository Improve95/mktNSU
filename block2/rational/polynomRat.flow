import labs/block2/rational/rationalDiff;

/* 
    re2polynom - rational expression to polynom 
*/

export {
    re2polynom(e : RatExpr) -> Div;
}

re2polynom(e : RatExpr) -> Div {
    switch(e) {
        Mul(l, r) : {
            lPolynom = re2polynom(l);
            rPolynom = re2polynom(r);
            Div(Mul(lPolynom.l, rPolynom.l), 
                Mul(lPolynom.r, rPolynom.r));
        }
        Div(l, r) : {
            lPolynom = re2polynom(l);
            rPolynom = re2polynom(r);
            Div(Mul(lPolynom.l, rPolynom.r), Mul(lPolynom.r, rPolynom.l));
        }
        Sub(l, r) : {
            lPolynom = re2polynom(l);
            rPolynom = re2polynom(r);
            Div(Sub(Mul(lPolynom.l, rPolynom.r), Mul(rPolynom.l, lPolynom.r)), 
                    Mul(lPolynom.r, rPolynom.r));
        }
        Sum(l, r) : {
            lPolynom = re2polynom(l);
            rPolynom = re2polynom(r);
            Div(Sum(Mul(lPolynom.l, rPolynom.r), Mul(rPolynom.l, lPolynom.r)), 
                    Mul(lPolynom.r, rPolynom.r));
        }
        Neg(val) : {
            value = re2polynom(val);
            Div(Neg(value.l), value.r);
        }
        Var(name) : Div(Var(name), Const(1));
        Const(c) : Div(Const(c), Const(1));
    }
}

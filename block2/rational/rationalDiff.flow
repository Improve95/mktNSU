import labs/block2/rational/rational;

export {
    differentiation(ex : RatExpr, var : Var) -> RatExpr;
    simplification(e : RatExpr) -> RatExpr;
}

differentiation(ex : RatExpr, var : Var) -> RatExpr {
    switch (ex) {
        Mul(a, b) : 
            simplification( Sum(
                simplification( Mul(differentiation(a, var), b) ), 
                simplification( Mul(a, differentiation(b, var)) ))
            );
        Sum(a, b) : 
            simplification( Sum(
                differentiation(a, var), 
                differentiation(b, var))
            );
        Sub(a, b) : 
            simplification( Sub(
                differentiation(a, var), 
                differentiation(b, var))
            );
        Div(a, b) : 
            simplification( Div(
                simplification( Sub(
                    simplification( Mul(differentiation(a, var), b) ), 
                    simplification( Mul(a, differentiation(b, var))) ) ), 
                simplification( Mul(b, b) ))
            );
        Var(a) : 
            if (a == var.var) Const(1)
            else Const(0);
        Const(a) : 
            Const(0);
        Neg(a) : 
            simplification( Neg(differentiation(a, var)) );
    }
}

simplification(e : RatExpr) -> RatExpr {
    switch(e) {
        Mul(l, r) : {
            simpleLeft = simplification(l);
            simpleRight = simplification(r);
            if (simpleLeft == Const(1)) {
                simpleRight;
            } else if (simpleRight == Const(1)) {
                simpleLeft;
            } else if (simpleLeft == Const(0) || simpleRight == Const(0)) {
                Const(0);
            } else {
                Mul(simpleLeft, simpleRight);
            }
        }
        Div(l, r) : {
            simpleLeft = simplification(l);
            simpleRight = simplification(r);
            if (simpleLeft == Const(0)) {
                Const(0);
            } else if (simpleRight == Const(1)) {
                simpleLeft;
            } else if (simpleLeft == simpleRight) {
                Const(1);
            } else {
                Div(simpleLeft, simpleRight);
            }
        }
        Sum(l, r) : {
            simpleLeft = simplification(l);
            simpleRight = simplification(r);
            if (simpleLeft == Const(0)) {
                simpleRight;
            } else if (simpleRight == Const(0)) {
                simpleLeft;
            } else {
                Sum(simpleLeft, simpleRight);
            }
        }
        Sub(l, r) : {
            simpleLeft = simplification(l);
            simpleRight = simplification(r);
            if (simpleLeft == Const(0)) {
                Neg(simpleRight);
            } else if (simpleRight == Const(0)) {
                simpleLeft;
            } else if (simpleLeft == simpleRight) {
                Const(0);
            } else {
                Sub(simpleLeft, simpleRight);
            }
        }
        default : e;
    }
}
